{"ast":null,"code":"import { CONFIG } from '../../../config';\nexport class BacklogRepository {\n  getFilteredBacklogUrl(currentPreset, currentUserId) {\n    switch (currentPreset) {\n      case 'my':\n        if (currentUserId) {\n          return `${CONFIG.apiEndpoint}/myItems?userId=${currentUserId}`;\n        } else {\n          return `${CONFIG.apiEndpoint}/backlog`;\n        }\n      case 'open':\n        return `${CONFIG.apiEndpoint}/openItems`;\n      case 'closed':\n        return `${CONFIG.apiEndpoint}/closedItems`;\n      default:\n        return `${CONFIG.apiEndpoint}/backlog`;\n    }\n  }\n  getPtItemUrl(itemId) {\n    return `${CONFIG.apiEndpoint}/item/${itemId}`;\n  }\n  postPtItemUrl() {\n    return `${CONFIG.apiEndpoint}/item`;\n  }\n  putPtItemUrl(itemId) {\n    return `${CONFIG.apiEndpoint}/item/${itemId}`;\n  }\n  deletePtItemUrl(itemId) {\n    return `${CONFIG.apiEndpoint}/item/${itemId}`;\n  }\n  postPtTaskUrl() {\n    return `${CONFIG.apiEndpoint}/task`;\n  }\n  putPtTaskUrl(taskId) {\n    return `${CONFIG.apiEndpoint}/task/${taskId}`;\n  }\n  deletePtTaskUrl(itemId, taskId) {\n    return `${CONFIG.apiEndpoint}/task/${itemId}/${taskId}`;\n  }\n  postPtCommentUrl() {\n    return `${CONFIG.apiEndpoint}/comment`;\n  }\n  deletePtCommentUrl(commentId) {\n    return `${CONFIG.apiEndpoint}/comment/${commentId}`;\n  }\n  getPtItems(currentPreset, currentUserId) {\n    return fetch(this.getFilteredBacklogUrl(currentPreset, currentUserId)).then(response => response.json());\n  }\n  getPtItem(ptItemId) {\n    return fetch(this.getPtItemUrl(ptItemId)).then(response => response.json());\n  }\n  insertPtItem(item) {\n    return fetch(this.postPtItemUrl(), {\n      method: 'POST',\n      body: JSON.stringify({\n        item: item\n      }),\n      headers: this.getJSONHeader()\n    }).then(response => response.json());\n  }\n  updatePtItem(item) {\n    return fetch(this.putPtItemUrl(item.id), {\n      method: 'PUT',\n      body: JSON.stringify({\n        item: item\n      }),\n      headers: this.getJSONHeader()\n    }).then(response => response.json());\n  }\n  insertPtTask(taskToBe, ptItemId) {\n    return fetch(this.postPtTaskUrl(), {\n      method: 'POST',\n      body: JSON.stringify({\n        task: taskToBe,\n        itemId: ptItemId\n      }),\n      headers: this.getJSONHeader()\n    }).then(response => response.json());\n  }\n  updatePtTask(task, ptItemId) {\n    return fetch(this.putPtTaskUrl(task.id), {\n      method: 'PUT',\n      body: JSON.stringify({\n        task: task,\n        itemId: ptItemId\n      }),\n      headers: this.getJSONHeader()\n    }).then(response => response.json());\n  }\n  deletePtTask(task, ptItemId) {\n    return fetch(this.deletePtTaskUrl(ptItemId, task.id), {\n      method: 'POST'\n    }).then(response => response.json());\n  }\n  insertPtComment(commentToBe, ptItemId) {\n    return fetch(this.postPtCommentUrl(), {\n      method: 'POST',\n      body: JSON.stringify({\n        comment: commentToBe,\n        itemId: ptItemId\n      }),\n      headers: this.getJSONHeader()\n    }).then(response => response.json());\n  }\n  getJSONHeader() {\n    return new Headers({\n      'Content-Type': 'application/json'\n    });\n  }\n}","map":{"version":3,"names":["CONFIG","BacklogRepository","getFilteredBacklogUrl","currentPreset","currentUserId","apiEndpoint","getPtItemUrl","itemId","postPtItemUrl","putPtItemUrl","deletePtItemUrl","postPtTaskUrl","putPtTaskUrl","taskId","deletePtTaskUrl","postPtCommentUrl","deletePtCommentUrl","commentId","getPtItems","fetch","then","response","json","getPtItem","ptItemId","insertPtItem","item","method","body","JSON","stringify","headers","getJSONHeader","updatePtItem","id","insertPtTask","taskToBe","task","updatePtTask","deletePtTask","insertPtComment","commentToBe","comment","Headers"],"sources":["/home/mati/Dev/Learning/Telerik-learning/rpstrackerreact-master/src/modules/backlog/repositories/backlog.repository.ts"],"sourcesContent":["import { PtTask, PtItem, PtComment, PtCommentToBe, PtTaskToBe, PtItemServer, PtTaskServer, PtCommentServer } from '../../../core/models/domain';\nimport { CONFIG } from '../../../config';\nimport { PresetType } from '../../../core/models/domain/types';\n\nexport class BacklogRepository {\n\n    private getFilteredBacklogUrl(currentPreset: PresetType, currentUserId?: number) {\n        switch (currentPreset) {\n            case 'my':\n                if (currentUserId) {\n                    return `${CONFIG.apiEndpoint}/myItems?userId=${currentUserId}`;\n                } else {\n                    return `${CONFIG.apiEndpoint}/backlog`;\n                }\n            case 'open':\n                return `${CONFIG.apiEndpoint}/openItems`;\n            case 'closed':\n                return `${CONFIG.apiEndpoint}/closedItems`;\n            default:\n                return `${CONFIG.apiEndpoint}/backlog`;\n        }\n    }\n\n    private getPtItemUrl(itemId: number) {\n        return `${CONFIG.apiEndpoint}/item/${itemId}`;\n    }\n\n    private postPtItemUrl() {\n        return `${CONFIG.apiEndpoint}/item`;\n    }\n\n    private putPtItemUrl(itemId: number) {\n        return `${CONFIG.apiEndpoint}/item/${itemId}`;\n    }\n\n    private deletePtItemUrl(itemId: number) {\n        return `${CONFIG.apiEndpoint}/item/${itemId}`;\n    }\n\n    private postPtTaskUrl() {\n        return `${CONFIG.apiEndpoint}/task`;\n    }\n\n    private putPtTaskUrl(taskId: number) {\n        return `${CONFIG.apiEndpoint}/task/${taskId}`;\n    }\n\n    private deletePtTaskUrl(itemId: number, taskId: number) {\n        return `${CONFIG.apiEndpoint}/task/${itemId}/${taskId}`;\n    }\n\n    private postPtCommentUrl() {\n        return `${CONFIG.apiEndpoint}/comment`;\n    }\n\n    private deletePtCommentUrl(commentId: number) {\n        return `${CONFIG.apiEndpoint}/comment/${commentId}`;\n    }\n\n    public getPtItems(\n        currentPreset: PresetType,\n        currentUserId: number | undefined\n    ): Promise<PtItemServer[]> {\n        return fetch(this.getFilteredBacklogUrl(currentPreset, currentUserId))\n            .then((response: Response) => response.json());\n    }\n\n\n    public getPtItem(\n        ptItemId: number,\n    ): Promise<PtItemServer> {\n        return fetch(this.getPtItemUrl(ptItemId))\n            .then((response: Response) => response.json());\n    }\n\n    public insertPtItem(\n        item: PtItem\n    ): Promise<PtItemServer> {\n        return fetch(this.postPtItemUrl(),\n            {\n                method: 'POST',\n                body: JSON.stringify({ item: item }),\n                headers: this.getJSONHeader()\n            })\n            .then((response: Response) => response.json());\n    }\n\n    public updatePtItem(\n        item: PtItem,\n    ): Promise<PtItemServer> {\n        return fetch(this.putPtItemUrl(item.id),\n            {\n                method: 'PUT',\n                body: JSON.stringify({ item: item }),\n                headers: this.getJSONHeader()\n            })\n            .then((response: Response) => response.json());\n    }\n\n    public insertPtTask(\n        taskToBe: PtTaskToBe,\n        ptItemId: number\n    ): Promise<PtTaskServer> {\n        return fetch(this.postPtTaskUrl(), {\n            method: 'POST',\n            body: JSON.stringify({ task: taskToBe, itemId: ptItemId }),\n            headers: this.getJSONHeader()\n        })\n            .then(response => response.json());\n    }\n\n    public updatePtTask(\n        task: PtTask,\n        ptItemId: number\n    ): Promise<PtTaskServer> {\n        return fetch(this.putPtTaskUrl(task.id), {\n            method: 'PUT',\n            body: JSON.stringify({ task: task, itemId: ptItemId }),\n            headers: this.getJSONHeader()\n        })\n            .then(response => response.json());\n    }\n\n    public deletePtTask(\n        task: PtTask,\n        ptItemId: number\n    ): Promise<boolean> {\n        return fetch(this.deletePtTaskUrl(ptItemId, task.id), {\n            method: 'POST'\n        })\n            .then(response => response.json());\n    }\n\n\n    public insertPtComment(\n        commentToBe: PtCommentToBe,\n        ptItemId: number\n    ): Promise<PtCommentServer> {\n        return fetch(this.postPtCommentUrl(), {\n            method: 'POST',\n            body: JSON.stringify({ comment: commentToBe, itemId: ptItemId }),\n            headers: this.getJSONHeader()\n        })\n            .then(response => response.json());\n    }\n\n    private getJSONHeader() {\n        return new Headers({\n            'Content-Type': 'application/json'\n        })\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}