{"ast":null,"code":"var _jsxFileName = \"/home/mati/Dev/Learning/Telerik-learning/rpstrackerreact-master/src/modules/backlog/components/item-tasks/pt-item-tasks.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { EMPTY_STRING } from \"../../../../core/helpers\";\nimport { PtTaskDisplayComponent } from \"./pt-task-display\";\nimport { NewTaskForm } from \"./new-task-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PtItemTasksComponent(props) {\n  _s();\n  const [tasks, setTasks] = useState(props.tasks);\n  const [lastUpdatedTitle, setLastUpdatedTitle] = useState(EMPTY_STRING);\n  const addTask = text => {\n    const newTask = {\n      title: text,\n      completed: false\n    };\n    props.addTaskMutation.mutate(newTask, {\n      onSuccess(createdTask) {\n        const newTasks = [createdTask, ...tasks];\n        setTasks(newTasks);\n      }\n    });\n  };\n  const toggleTaskCompletion = index => {\n    const theTask = tasks[index];\n    props.toggleTaskCompletionMutation.mutate(theTask, {\n      onSuccess(toggledTask) {\n        const newTasks = [...tasks];\n        newTasks[index].completed = toggledTask.completed;\n        setTasks(newTasks);\n      }\n    });\n  };\n  function toggleTapped(task) {\n    const index = tasks.findIndex(t => t.id === task.id);\n    toggleTaskCompletion(index);\n  }\n  function taskTitleChange(task, newTitle) {\n    if (task.title === newTitle) {\n      return;\n    }\n    setLastUpdatedTitle(newTitle);\n  }\n  function onTaskFocused(task) {\n    setLastUpdatedTitle(task.title ? task.title : EMPTY_STRING);\n  }\n  function updateTask(task) {\n    const index = tasks.findIndex(t => t.id === task.id);\n    const taskUpdate = {\n      task: task,\n      newTitle: lastUpdatedTitle\n    };\n    props.updateTaskMutation.mutate(taskUpdate, {\n      onSuccess(updatedTask) {\n        const newTasks = [...tasks];\n        newTasks[index].title = updatedTask.title;\n        setTasks(newTasks);\n      }\n    });\n  }\n  function onTaskBlurred(task) {\n    if (task.title === lastUpdatedTitle) {\n      return;\n    }\n    updateTask(task);\n    setLastUpdatedTitle(EMPTY_STRING);\n  }\n  const removeTask = index => {\n    const theTask = tasks[index];\n    props.deleteTaskMutation.mutate(theTask, {\n      onSuccess(deleted) {\n        if (deleted) {\n          const newChatEntries = [...tasks];\n          newChatEntries.splice(index, 1);\n          setTasks(newChatEntries);\n        }\n      }\n    });\n  };\n  function deleteTapped(task) {\n    const index = tasks.findIndex(t => t.id === task.id);\n    removeTask(index);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewTaskForm, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), tasks.map(task => {\n      return /*#__PURE__*/_jsxDEV(PtTaskDisplayComponent, {\n        task: task,\n        onToggleTaskCompletion: toggleTapped,\n        onDeleteTask: deleteTapped,\n        onTaskFocused: onTaskFocused,\n        onTaskBlurred: onTaskBlurred,\n        taskTitleChange: taskTitleChange\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n_s(PtItemTasksComponent, \"2lCzRrZXTb+xPXa5H/VXuH+y2BI=\");\n_c = PtItemTasksComponent;\nvar _c;\n$RefreshReg$(_c, \"PtItemTasksComponent\");","map":{"version":3,"names":["useState","EMPTY_STRING","PtTaskDisplayComponent","NewTaskForm","jsxDEV","_jsxDEV","PtItemTasksComponent","props","_s","tasks","setTasks","lastUpdatedTitle","setLastUpdatedTitle","addTask","text","newTask","title","completed","addTaskMutation","mutate","onSuccess","createdTask","newTasks","toggleTaskCompletion","index","theTask","toggleTaskCompletionMutation","toggledTask","toggleTapped","task","findIndex","t","id","taskTitleChange","newTitle","onTaskFocused","updateTask","taskUpdate","updateTaskMutation","updatedTask","onTaskBlurred","removeTask","deleteTaskMutation","deleted","newChatEntries","splice","deleteTapped","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onToggleTaskCompletion","onDeleteTask","_c","$RefreshReg$"],"sources":["/home/mati/Dev/Learning/Telerik-learning/rpstrackerreact-master/src/modules/backlog/components/item-tasks/pt-item-tasks.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { PtTask } from \"../../../../core/models/domain\";\nimport { EMPTY_STRING } from \"../../../../core/helpers\";\nimport { PtTaskTitleUpdate } from \"../../../../shared/models/dto/pt-task-update\";\nimport { PtNewTask } from \"../../../../shared/models/dto/pt-new-task\";\nimport { PtTaskDisplayComponent } from \"./pt-task-display\";\nimport { UseMutationResult } from \"react-query\";\nimport { NewTaskForm } from \"./new-task-form\";\n\nexport type PtItemTasksComponentProps = {\n    tasks: PtTask[];\n    addTaskMutation: UseMutationResult<PtTask, unknown, PtNewTask, unknown>;\n    deleteTaskMutation: UseMutationResult<boolean, unknown, PtTask, unknown>;\n    toggleTaskCompletionMutation: UseMutationResult<PtTask, unknown, PtTask, unknown>;\n    updateTaskMutation: UseMutationResult<PtTask, unknown, PtTaskTitleUpdate, unknown>;\n};\n\nexport function PtItemTasksComponent(props: PtItemTasksComponentProps) {\n\n    const [tasks, setTasks] = useState<PtTask[]>(props.tasks);\n    const [lastUpdatedTitle, setLastUpdatedTitle] = useState<string>(EMPTY_STRING);\n\n    const addTask = (text: string) => {\n        const newTask: PtNewTask = { title: text, completed: false };\n        props.addTaskMutation.mutate(newTask, {\n            onSuccess(createdTask) {\n                const newTasks = [createdTask, ...tasks];\n                setTasks(newTasks);\n            },\n        });\n    };\n\n    const toggleTaskCompletion = (index: number) => {\n        const theTask = tasks[index];\n        props.toggleTaskCompletionMutation.mutate(theTask, {\n            onSuccess(toggledTask) {\n                const newTasks = [...tasks];\n                newTasks[index].completed = toggledTask.completed;\n                setTasks(newTasks);\n            },\n        });\n    };\n\n\n    function toggleTapped(task: PtTask) {\n        const index = tasks.findIndex(t => t.id === task.id);\n        toggleTaskCompletion(index);\n    }\n\n\n    function taskTitleChange(task: PtTask, newTitle: string) {\n        if (task.title === newTitle) {\n            return;\n        }\n        \n        setLastUpdatedTitle(newTitle);\n    }\n\n    function onTaskFocused(task: PtTask) {\n        setLastUpdatedTitle(task.title ? task.title : EMPTY_STRING);\n    }\n\n    function updateTask(task: PtTask) {\n        const index = tasks.findIndex(t => t.id === task.id);\n        const taskUpdate: PtTaskTitleUpdate = {\n            task: task,\n            newTitle: lastUpdatedTitle\n        };\n        \n        props.updateTaskMutation.mutate(taskUpdate, {\n            onSuccess(updatedTask) {\n                const newTasks = [...tasks];\n                newTasks[index].title = updatedTask.title;\n                setTasks(newTasks);\n            },\n        });\n    }\n\n    function onTaskBlurred(task: PtTask) {\n        if (task.title === lastUpdatedTitle) {\n            return;\n        }\n        updateTask(task);\n\n        setLastUpdatedTitle(EMPTY_STRING);\n    }\n\n    const removeTask = (index: number) => {\n        const theTask = tasks[index];\n        props.deleteTaskMutation.mutate(theTask!, {\n            onSuccess(deleted) {\n                if (deleted) {\n                    const newChatEntries = [...tasks];\n                    newChatEntries.splice(index, 1);\n                    setTasks(newChatEntries);\n                }\n            },\n        });\n    };\n\n    function deleteTapped(task: PtTask) {\n        const index = tasks.findIndex(t => t.id === task.id);\n        removeTask(index);\n    }\n\n    return (\n        <div>\n            <NewTaskForm addTask={addTask} />\n\n            <hr />\n\n            {\n                tasks.map(task => {\n                    return (\n                        <PtTaskDisplayComponent \n                            key={task.id}\n                            task={task} \n                            onToggleTaskCompletion={toggleTapped} \n                            onDeleteTask={deleteTapped}\n                            onTaskFocused={onTaskFocused}\n                            onTaskBlurred={onTaskBlurred}\n                            taskTitleChange={taskTitleChange}\n                            />\n                    );\n                })\n            }\n        </div>\n    );\n    \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}