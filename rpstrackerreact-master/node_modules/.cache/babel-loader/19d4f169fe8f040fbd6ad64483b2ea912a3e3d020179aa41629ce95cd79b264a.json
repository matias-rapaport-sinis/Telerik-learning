{"ast":null,"code":"import { CONFIG } from '../../../config';\nexport class DashboardRepository {\n  constructor() {}\n  getFilterParamString(filter) {\n    const params = [filter.userId ? `userId=${filter.userId}` : '', filter.dateStart ? `dateStart=${filter.dateStart.toDateString()}` : '', filter.dateEnd ? `dateEnd=${filter.dateEnd.toDateString()}` : ''];\n    const paramStr = params.join('&');\n    return paramStr;\n  }\n  getStatusCountsUrl(paramStr) {\n    return `${CONFIG.apiEndpoint}/stats/statuscounts?${paramStr}`;\n  }\n  getPriorityCountsUrl(paramStr) {\n    return `${CONFIG.apiEndpoint}/stats/prioritycounts?${paramStr}`;\n  }\n  getTypeCountsUrl(paramStr) {\n    return `${CONFIG.apiEndpoint}/stats/prioritycounts?${paramStr}`;\n  }\n  getFilteredIssuesUrl(paramStr) {\n    return `${CONFIG.apiEndpoint}/stats/filteredissues?${paramStr}`;\n  }\n  getStatusCounts(filter) {\n    return fetch(this.getStatusCountsUrl(this.getFilterParamString(filter))).then(response => response.json());\n  }\n  getPriorityCounts(filter) {\n    return fetch(this.getPriorityCountsUrl(this.getFilterParamString(filter))).then(response => response.json());\n  }\n  getTypeCounts(filter) {\n    return fetch(this.getTypeCountsUrl(this.getFilterParamString(filter))).then(response => response.json());\n  }\n  getFilteredIssues(filter) {\n    return fetch(this.getFilteredIssuesUrl(this.getFilterParamString(filter))).then(response => response.json());\n  }\n}","map":{"version":3,"names":["CONFIG","DashboardRepository","constructor","getFilterParamString","filter","params","userId","dateStart","toDateString","dateEnd","paramStr","join","getStatusCountsUrl","apiEndpoint","getPriorityCountsUrl","getTypeCountsUrl","getFilteredIssuesUrl","getStatusCounts","fetch","then","response","json","getPriorityCounts","getTypeCounts","getFilteredIssues"],"sources":["/home/mati/Dev/Learning/Telerik-learning/rpstrackerreact-master/src/modules/dashboard/repositories/dashboard.repository.ts"],"sourcesContent":["import { StatusCounts, PriorityCounts, TypeCounts } from '../models';\nimport { CONFIG } from '../../../config';\nimport { PtItem } from '../../../core/models/domain';\n\n\nexport interface DashboardFilter {\n    userId?: number;\n    dateStart?: Date;\n    dateEnd?: Date;\n}\n\nexport interface ItemsForMonth {\n    closed: PtItem[];\n    open: PtItem[];\n}\n\nexport interface FilteredIssues {\n    categories: Date[];\n    items: ItemsForMonth[];\n}\n\nexport class DashboardRepository {\n    constructor() { }\n\n    private getFilterParamString(filter: DashboardFilter): string {\n        const params = [\n            filter.userId ? `userId=${filter.userId}` : '',\n            filter.dateStart ? `dateStart=${filter.dateStart.toDateString()}` : '',\n            filter.dateEnd ? `dateEnd=${filter.dateEnd.toDateString()}` : ''\n        ];\n        const paramStr = params.join('&');\n        return paramStr;\n    }\n    private getStatusCountsUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/statuscounts?${paramStr}`;\n    }\n\n    private getPriorityCountsUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/prioritycounts?${paramStr}`;\n    }\n\n    private getTypeCountsUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/prioritycounts?${paramStr}`;\n    }\n\n    private getFilteredIssuesUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/filteredissues?${paramStr}`;\n    }\n\n    public getStatusCounts(filter: DashboardFilter): Promise<StatusCounts> {\n        return fetch(this.getStatusCountsUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n\n    public getPriorityCounts(filter: DashboardFilter): Promise<PriorityCounts> {\n        return fetch(this.getPriorityCountsUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n\n    public getTypeCounts(filter: DashboardFilter): Promise<TypeCounts> {\n        return fetch(this.getTypeCountsUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n\n    public getFilteredIssues(filter: DashboardFilter): Promise<FilteredIssues> {\n        return fetch(this.getFilteredIssuesUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n}\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,iBAAiB;AAoBxC,OAAO,MAAMC,mBAAmB,CAAC;EAC7BC,WAAWA,CAAA,EAAG,CAAE;EAERC,oBAAoBA,CAACC,MAAuB,EAAU;IAC1D,MAAMC,MAAM,GAAG,CACXD,MAAM,CAACE,MAAM,GAAG,UAAUF,MAAM,CAACE,MAAM,EAAE,GAAG,EAAE,EAC9CF,MAAM,CAACG,SAAS,GAAG,aAAaH,MAAM,CAACG,SAAS,CAACC,YAAY,CAAC,CAAC,EAAE,GAAG,EAAE,EACtEJ,MAAM,CAACK,OAAO,GAAG,WAAWL,MAAM,CAACK,OAAO,CAACD,YAAY,CAAC,CAAC,EAAE,GAAG,EAAE,CACnE;IACD,MAAME,QAAQ,GAAGL,MAAM,CAACM,IAAI,CAAC,GAAG,CAAC;IACjC,OAAOD,QAAQ;EACnB;EACQE,kBAAkBA,CAACF,QAAgB,EAAU;IACjD,OAAO,GAAGV,MAAM,CAACa,WAAW,uBAAuBH,QAAQ,EAAE;EACjE;EAEQI,oBAAoBA,CAACJ,QAAgB,EAAU;IACnD,OAAO,GAAGV,MAAM,CAACa,WAAW,yBAAyBH,QAAQ,EAAE;EACnE;EAEQK,gBAAgBA,CAACL,QAAgB,EAAU;IAC/C,OAAO,GAAGV,MAAM,CAACa,WAAW,yBAAyBH,QAAQ,EAAE;EACnE;EAEQM,oBAAoBA,CAACN,QAAgB,EAAU;IACnD,OAAO,GAAGV,MAAM,CAACa,WAAW,yBAAyBH,QAAQ,EAAE;EACnE;EAEOO,eAAeA,CAACb,MAAuB,EAAyB;IACnE,OAAOc,KAAK,CAAC,IAAI,CAACN,kBAAkB,CAAC,IAAI,CAACT,oBAAoB,CAACC,MAAM,CAAC,CAAC,CAAC,CACnEe,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;EAC1C;EAEOC,iBAAiBA,CAAClB,MAAuB,EAA2B;IACvE,OAAOc,KAAK,CAAC,IAAI,CAACJ,oBAAoB,CAAC,IAAI,CAACX,oBAAoB,CAACC,MAAM,CAAC,CAAC,CAAC,CACrEe,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;EAC1C;EAEOE,aAAaA,CAACnB,MAAuB,EAAuB;IAC/D,OAAOc,KAAK,CAAC,IAAI,CAACH,gBAAgB,CAAC,IAAI,CAACZ,oBAAoB,CAACC,MAAM,CAAC,CAAC,CAAC,CACjEe,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;EAC1C;EAEOG,iBAAiBA,CAACpB,MAAuB,EAA2B;IACvE,OAAOc,KAAK,CAAC,IAAI,CAACF,oBAAoB,CAAC,IAAI,CAACb,oBAAoB,CAACC,MAAM,CAAC,CAAC,CAAC,CACrEe,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;EAC1C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}