{"ast":null,"code":"import { ptItemsServerToPtItems, ptItemServerToPtItem, ptTaskServerToPtTask, ptCommentServerToPtComment } from '../../../core/models/domain';\nimport { PriorityEnum, StatusEnum } from '../../../core/models/domain/enums';\nimport { getUserAvatarUrl } from '../../../core/helpers/user-avatar-helper';\nimport { CONFIG } from '../../../config';\nexport const tempCurrentUser = {\n  avatar: getUserAvatarUrl(CONFIG.apiEndpoint, 21),\n  dateCreated: new Date(),\n  dateModified: new Date(),\n  fullName: 'Alex Ziskind',\n  id: 21\n};\nexport class BacklogService {\n  get currentPreset() {\n    return this.store.value.selectedPreset;\n  }\n  get currentUserId() {\n    if (this.store.value.currentUser) {\n      return this.store.value.currentUser.id;\n    } else {\n      return undefined;\n    }\n  }\n  constructor(repo, store) {\n    this.repo = repo;\n    this.store = store;\n    this.store.value.currentUser = tempCurrentUser;\n  }\n  getItems(preset) {\n    return this.repo.getPtItems(preset, this.currentUserId).then(ptItemsServer => {\n      const ptItems = ptItemsServerToPtItems(ptItemsServer);\n      ptItems.forEach(i => {\n        this.setUserAvatarUrl(i.assignee);\n        i.comments.forEach(c => this.setUserAvatarUrl(c.user));\n      });\n      return ptItems;\n    });\n  }\n  getPtItem(id) {\n    return this.repo.getPtItem(id).then(ptItemServer => {\n      const ptItem = ptItemServerToPtItem(ptItemServer);\n      this.setUserAvatarUrl(ptItem.assignee);\n      ptItem.comments.forEach(c => this.setUserAvatarUrl(c.user));\n      return ptItem;\n    });\n  }\n  addNewPtItem(newItem, assignee) {\n    const item = {\n      id: 0,\n      title: newItem.title,\n      description: newItem.description,\n      type: newItem.typeStr,\n      estimate: 0,\n      priority: PriorityEnum.Medium,\n      status: StatusEnum.Open,\n      assignee: assignee,\n      tasks: [],\n      comments: [],\n      dateCreated: new Date(),\n      dateModified: new Date()\n    };\n    return new Promise((resolve, reject) => {\n      this.repo.insertPtItem(item).then(nextItemServer => {\n        const nextItem = ptItemServerToPtItem(nextItemServer);\n        this.setUserAvatar(nextItem.assignee);\n        resolve(nextItem);\n      });\n    });\n  }\n  updatePtItem(item) {\n    return new Promise((resolve, reject) => {\n      this.repo.updatePtItem(item).then(updatedItemServer => {\n        const updatedItem = ptItemServerToPtItem(updatedItemServer);\n        this.setUserAvatar(updatedItem.assignee);\n        resolve(updatedItem);\n      });\n    });\n  }\n\n  /*\n   public deletePtItem(item: PtItem) {\n      this.repo.deletePtItem(item.id,\n          () => {\n               const updatedItems = this.store.value.backlogItems.filter((i) => {\n                  return i.id !== item.id;\n              });\n              this.store.set('backlogItems', updatedItems);\n           }\n      );\n  }\n  */\n\n  addNewPtTask(newTask, currentItem) {\n    const taskToBe = {\n      title: newTask.title,\n      completed: false,\n      dateCreated: new Date(),\n      dateModified: new Date(),\n      dateStart: newTask.dateStart ? newTask.dateStart : undefined,\n      dateEnd: newTask.dateEnd ? newTask.dateEnd : undefined\n    };\n    return new Promise((resolve, reject) => {\n      this.repo.insertPtTask(taskToBe, currentItem.id).then(nextTaskServer => {\n        const nextTask = ptTaskServerToPtTask(nextTaskServer);\n        resolve(nextTask);\n      });\n    });\n  }\n  updatePtTask(currentItem, task, toggle, newTitle) {\n    const taskToUpdate = {\n      id: task.id,\n      title: newTitle ? newTitle : task.title,\n      completed: toggle ? !task.completed : task.completed,\n      dateCreated: task.dateCreated,\n      dateModified: new Date(),\n      dateStart: task.dateStart ? task.dateStart : undefined,\n      dateEnd: task.dateEnd ? task.dateEnd : undefined\n    };\n    return new Promise((resolve, reject) => {\n      this.repo.updatePtTask(taskToUpdate, currentItem.id).then(updatedTaskServer => {\n        const updatedTask = ptTaskServerToPtTask(updatedTaskServer);\n        resolve(updatedTask);\n      });\n    });\n  }\n  deletePtTask(currentItem, task) {\n    return new Promise((resolve, reject) => {\n      this.repo.deletePtTask(task, currentItem.id).then(ok => {\n        const updatedTasks = currentItem.tasks.filter(t => {\n          if (t.id !== task.id) {\n            return t;\n          }\n        });\n        currentItem.tasks = updatedTasks;\n        resolve(ok);\n      });\n    });\n  }\n  addNewPtComment(newComment, currentItem) {\n    const commentToBe = {\n      title: newComment.title,\n      user: this.store.value.currentUser,\n      dateCreated: new Date(),\n      dateModified: new Date()\n    };\n    return new Promise((resolve, reject) => {\n      this.repo.insertPtComment(commentToBe, currentItem.id).then(nextCommentServer => {\n        const nextComment = ptCommentServerToPtComment(nextCommentServer);\n        resolve(nextComment);\n      });\n    });\n  }\n  setUserAvatarUrl(user) {\n    if (user) {\n      user.avatar = `${CONFIG.apiEndpoint}/photo/${user.id}`;\n    }\n  }\n  setUserAvatar(user) {\n    user.avatar = getUserAvatarUrl(CONFIG.apiEndpoint, user.id);\n  }\n}","map":{"version":3,"names":["ptItemsServerToPtItems","ptItemServerToPtItem","ptTaskServerToPtTask","ptCommentServerToPtComment","PriorityEnum","StatusEnum","getUserAvatarUrl","CONFIG","tempCurrentUser","avatar","apiEndpoint","dateCreated","Date","dateModified","fullName","id","BacklogService","currentPreset","store","value","selectedPreset","currentUserId","currentUser","undefined","constructor","repo","getItems","preset","getPtItems","then","ptItemsServer","ptItems","forEach","i","setUserAvatarUrl","assignee","comments","c","user","getPtItem","ptItemServer","ptItem","addNewPtItem","newItem","item","title","description","type","typeStr","estimate","priority","Medium","status","Open","tasks","Promise","resolve","reject","insertPtItem","nextItemServer","nextItem","setUserAvatar","updatePtItem","updatedItemServer","updatedItem","addNewPtTask","newTask","currentItem","taskToBe","completed","dateStart","dateEnd","insertPtTask","nextTaskServer","nextTask","updatePtTask","task","toggle","newTitle","taskToUpdate","updatedTaskServer","updatedTask","deletePtTask","ok","updatedTasks","filter","t","addNewPtComment","newComment","commentToBe","insertPtComment","nextCommentServer","nextComment"],"sources":["/home/mati/Dev/Learning/Telerik-learning/rpstrackerreact-master/src/modules/backlog/services/backlog.service.ts"],"sourcesContent":["import { Store } from '../../../core/state/app-store';\nimport { BacklogRepository } from '../repositories/backlog.repository';\n\nimport { PtItem, PtUser, PtTask, PtComment, PtCommentToBe, PtTaskToBe, PtItemServer, ptItemsServerToPtItems, ptItemServerToPtItem, PtTaskServer, ptTaskServerToPtTask, PtCommentServer, ptCommentServerToPtComment } from '../../../core/models/domain';\n\nimport { PriorityEnum, StatusEnum } from '../../../core/models/domain/enums';\nimport { getUserAvatarUrl } from '../../../core/helpers/user-avatar-helper';\n\n\nimport { CONFIG } from '../../../config';\nimport { PresetType } from '../../../core/models/domain/types';\nimport { PtNewItem } from '../../../shared/models/dto/pt-new-item';\nimport { PtNewTask } from '../../../shared/models/dto/pt-new-task';\nimport { PtNewComment } from '../../../shared/models/dto/pt-new-comment';\n\n\nexport const tempCurrentUser = {\n    avatar: getUserAvatarUrl(CONFIG.apiEndpoint, 21),\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    fullName: 'Alex Ziskind',\n    id: 21\n};\n\n\nexport class BacklogService {\n\n\n    private get currentPreset() {\n        return this.store.value.selectedPreset;\n    }\n\n    private get currentUserId() {\n        if (this.store.value.currentUser) {\n            return this.store.value.currentUser.id;\n        } else {\n            return undefined;\n        }\n    }\n\n\n    constructor(\n        private repo: BacklogRepository,\n        private store: Store\n    ) {\n        this.store.value.currentUser = tempCurrentUser;\n    }\n\n    public getItems(preset: PresetType): Promise<PtItem[]> {\n        return this.repo.getPtItems(preset, this.currentUserId)\n            .then((ptItemsServer: PtItemServer[]) => {\n                const ptItems = ptItemsServerToPtItems(ptItemsServer);\n                ptItems.forEach(i => {\n                    this.setUserAvatarUrl(i.assignee);\n                    i.comments.forEach(c => this.setUserAvatarUrl(c.user));\n                });\n                return ptItems;\n            });\n    }\n\n    public getPtItem(id: number): Promise<PtItem> {\n        return this.repo.getPtItem(id)\n            .then((ptItemServer: PtItemServer) => {\n                const ptItem = ptItemServerToPtItem(ptItemServer);\n                this.setUserAvatarUrl(ptItem.assignee);\n                ptItem.comments.forEach(c => this.setUserAvatarUrl(c.user));\n                return ptItem;\n            });\n    }\n\n    public addNewPtItem(newItem: PtNewItem, assignee: PtUser): Promise<PtItem> {\n        const item: PtItem = {\n            id: 0,\n            title: newItem.title,\n            description: newItem.description,\n            type: newItem.typeStr,\n            estimate: 0,\n            priority: PriorityEnum.Medium,\n            status: StatusEnum.Open,\n            assignee: assignee,\n            tasks: [],\n            comments: [],\n            dateCreated: new Date(),\n            dateModified: new Date()\n        };\n        return new Promise<PtItem>((resolve, reject) => {\n            this.repo.insertPtItem(item)\n                .then((nextItemServer: PtItemServer) => {\n                    const nextItem = ptItemServerToPtItem(nextItemServer);\n                    this.setUserAvatar(nextItem.assignee);\n                    resolve(nextItem);\n                });\n        });\n    }\n\n\n    public updatePtItem(item: PtItem): Promise<PtItem> {\n        return new Promise<PtItem>((resolve, reject) => {\n            this.repo.updatePtItem(item)\n                .then((updatedItemServer: PtItemServer) => {\n                    const updatedItem = ptItemServerToPtItem(updatedItemServer);\n                    this.setUserAvatar(updatedItem.assignee);\n                    resolve(updatedItem);\n                });\n        });\n    }\n\n    /*\n\n    public deletePtItem(item: PtItem) {\n        this.repo.deletePtItem(item.id,\n            () => {\n\n                const updatedItems = this.store.value.backlogItems.filter((i) => {\n                    return i.id !== item.id;\n                });\n                this.store.set('backlogItems', updatedItems);\n\n            }\n        );\n    }\n*/\n\n    public addNewPtTask(newTask: PtNewTask, currentItem: PtItem): Promise<PtTask> {\n        const taskToBe: PtTaskToBe = {\n            title: newTask.title,\n            completed: false,\n            dateCreated: new Date(),\n            dateModified: new Date(),\n            dateStart: newTask.dateStart ? newTask.dateStart : undefined,\n            dateEnd: newTask.dateEnd ? newTask.dateEnd : undefined\n        };\n        return new Promise<PtTask>((resolve, reject) => {\n            this.repo.insertPtTask(\n                taskToBe,\n                currentItem.id)\n                .then((nextTaskServer: PtTaskServer) => {\n                    const nextTask = ptTaskServerToPtTask(nextTaskServer);\n                    resolve(nextTask);\n                }\n            );\n        });\n    }\n\n\n    public updatePtTask(currentItem: PtItem, task: PtTask, toggle: boolean, newTitle?: string): Promise<PtTask> {\n        const taskToUpdate: PtTask = {\n            id: task.id,\n            title: newTitle ? newTitle : task.title,\n            completed: toggle ? !task.completed : task.completed,\n            dateCreated: task.dateCreated,\n            dateModified: new Date(),\n            dateStart: task.dateStart ? task.dateStart : undefined,\n            dateEnd: task.dateEnd ? task.dateEnd : undefined\n        };\n        return new Promise<PtTask>((resolve, reject) => {\n            this.repo.updatePtTask(\n                taskToUpdate,\n                currentItem.id)\n                .then((updatedTaskServer: PtTaskServer) => {\n                    const updatedTask = ptTaskServerToPtTask(updatedTaskServer);\n                    resolve(updatedTask);\n                }\n            );\n        });\n    }\n\n    public deletePtTask(currentItem: PtItem, task: PtTask): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            this.repo.deletePtTask(task, currentItem.id)\n                .then((ok: boolean) => {\n                    const updatedTasks = currentItem.tasks.filter(t => {\n                        if (t.id !== task.id) {\n                            return t;\n                        }\n                    });\n                    currentItem.tasks = updatedTasks;\n                    resolve(ok);\n                }\n                );\n        });\n    }\n\n    public addNewPtComment(newComment: PtNewComment, currentItem: PtItem): Promise<PtComment> {\n        const commentToBe: PtCommentToBe = {\n            title: newComment.title,\n            user: this.store.value.currentUser,\n            dateCreated: new Date(),\n            dateModified: new Date()\n        };\n\n        return new Promise<PtComment>((resolve, reject) => {\n            this.repo.insertPtComment(\n                commentToBe,\n                currentItem.id\n            )\n                .then((nextCommentServer: PtCommentServer) => {\n                    const nextComment = ptCommentServerToPtComment(nextCommentServer);\n                    resolve(nextComment);\n                });\n        });\n    }\n\n    private setUserAvatarUrl(user: PtUser | undefined) {\n        if (user) {\n            user.avatar = `${CONFIG.apiEndpoint}/photo/${user.id}`;\n        }\n    }\n\n    private setUserAvatar(user: PtUser) {\n        user.avatar = getUserAvatarUrl(CONFIG.apiEndpoint, user.id);\n    }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}